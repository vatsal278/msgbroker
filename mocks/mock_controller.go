// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatsal278/msgbroker/internal/handler (interfaces: IController)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIController is a mock of IController interface.
type MockIController struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerMockRecorder
}

// MockIControllerMockRecorder is the mock recorder for MockIController.
type MockIControllerMockRecorder struct {
	mock *MockIController
}

// NewMockIController creates a new mock instance.
func NewMockIController(ctrl *gomock.Controller) *MockIController {
	mock := &MockIController{ctrl: ctrl}
	mock.recorder = &MockIControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIController) EXPECT() *MockIControllerMockRecorder {
	return m.recorder
}

// NoRouteFound mocks base method.
func (m *MockIController) NoRouteFound() func(http.ResponseWriter, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoRouteFound")
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

// NoRouteFound indicates an expected call of NoRouteFound.
func (mr *MockIControllerMockRecorder) NoRouteFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoRouteFound", reflect.TypeOf((*MockIController)(nil).NoRouteFound))
}

// PublishMessage mocks base method.
func (m *MockIController) PublishMessage() func(http.ResponseWriter, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage")
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockIControllerMockRecorder) PublishMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockIController)(nil).PublishMessage))
}

// RegisterPublisher mocks base method.
func (m *MockIController) RegisterPublisher() func(http.ResponseWriter, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPublisher")
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

// RegisterPublisher indicates an expected call of RegisterPublisher.
func (mr *MockIControllerMockRecorder) RegisterPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPublisher", reflect.TypeOf((*MockIController)(nil).RegisterPublisher))
}

// RegisterSubscriber mocks base method.
func (m *MockIController) RegisterSubscriber() func(http.ResponseWriter, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSubscriber")
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

// RegisterSubscriber indicates an expected call of RegisterSubscriber.
func (mr *MockIControllerMockRecorder) RegisterSubscriber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscriber", reflect.TypeOf((*MockIController)(nil).RegisterSubscriber))
}
